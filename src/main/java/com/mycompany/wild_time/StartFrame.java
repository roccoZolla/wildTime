/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.wild_time;

import com.mycompany.wild_time.Engine.GameManager;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author rocco
 */
public class StartFrame extends javax.swing.JFrame {
    private GameManager gameManager;
    
    /**
     * Creates new form StartFrame
     */
    public StartFrame() {
        initComponents();
        initButtons();
        
        configureUI();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    public StartFrame(GameManager gm) {
        initComponents();
        initButtons();
        
        gameManager = gm;
        
        configureUI();
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    private void configureUI() {
        setTitle("Game Engine 2.0");
        setSize(800, 500);
    }
    
    private void initButtons() {
        // ... Inizializzazione dei componenti grafici ...
        buttonNewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewGameActionPerformed(evt);
            }
        });

        buttonContinue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonContinueActionPerformed(evt);
            }
        });

        buttonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExitActionPerformed(evt);
            }
        });
    }

    
    private void buttonNewGameActionPerformed(java.awt.event.ActionEvent evt) {                                              
        handleNewGame();
    }                                             

    private void buttonExitActionPerformed(java.awt.event.ActionEvent evt) {                                           
        System.exit(0);
    }                                          

    private void buttonContinueActionPerformed(java.awt.event.ActionEvent evt) {                                               
        handleContinue();
    }
    
    private void handleNewGame() {
        String userDir = System.getProperty("user.dir");
        String outputFolder = userDir + File.separator + "save.dat";
        File save = new File(outputFolder);

        try {
            if (save.exists()) {
                int userChoice = JOptionPane.showConfirmDialog(this, 
                    "Esiste già un file di salvataggio! Vuoi sovrascriverlo e iniziare una nuova partita?",
                    "Conferma sovrascrittura", JOptionPane.YES_NO_OPTION);

                if (userChoice == JOptionPane.YES_OPTION) {
                    if (save.delete() && save.createNewFile()) {
                        gameManager.startNewGame(save);
                        setVisible(false);
                    } else {
                        // Gestisci l'errore se non è possibile cancellare/creare il file
                    }
                }
            } else if (save.createNewFile()) {
                gameManager.startNewGame(save);
                setVisible(false);
            }
        } catch (IOException ex) {
            Logger.getLogger(StartFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void handleContinue() {
        String userDir = System.getProperty("user.dir");
        String outputFile = userDir + File.separator + "save.dat";

        File save = new File(outputFile);

        if (!save.exists()) {
            JOptionPane.showMessageDialog(this, "Non esiste alcun file di salvataggio!");
        } else {
            gameManager.continueGame(save);
            setVisible(false);
        }
    }
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonNewGame = new javax.swing.JButton();
        buttonExit = new javax.swing.JButton();
        buttonContinue = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        buttonNewGame.setText("New Game");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 9, 0);
        getContentPane().add(buttonNewGame, gridBagConstraints);

        buttonExit.setText("Exit");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 0);
        getContentPane().add(buttonExit, gridBagConstraints);

        buttonContinue.setText("Continue");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 18, 0);
        getContentPane().add(buttonContinue, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonContinue;
    private javax.swing.JButton buttonExit;
    private javax.swing.JButton buttonNewGame;
    // End of variables declaration//GEN-END:variables
}